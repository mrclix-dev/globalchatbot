const fs = require('fs');
const path = require('path');
const chalk = require('chalk');

class Runner {
    constructor(options) {
        this.configPath = options.config;
        this.config = null;
    }

    startLoading() {
        let dots = 0;
        this.loadingInterval = setInterval(() => {
            process.stdout.write(chalk.blue('\rLoading' + '.'.repeat(dots % 4)));
            dots++;
        }, 500);
    }

    stopLoading() {
        clearInterval(this.loadingInterval);
        console.clear();
        console.log(chalk.cyan('Done loading!\n'));
    }

    readConfig() {
        const ext = path.extname(this.configPath);
        try {
            if (ext === '.json') {
                this.config = JSON.parse(fs.readFileSync(this.configPath, 'utf8'));
            } else if (ext === '.js') {
                this.config = require(path.resolve(this.configPath));
            } else {
                throw new Error('Unsupported configuration file format');
            }
        } catch (error) {
            this.stopLoading();
            console.error(chalk.red('Error loading configuration file:'), error.message);
            process.exit(1); // Exit the process with an error code
        }
    }

    delayedExecution() {
        setTimeout(() => {
            this.stopLoading();
            this.runFilesSlowly();
        }, 3000);  // Adjust the delay as needed (3000ms = 3 seconds)
    }

    runFilesSlowly() {
        const filesToRun = this.config.runnersys;
        const entries = Object.entries(filesToRun);
        let index = 0;

        const interval = setInterval(() => {
            if (index >= entries.length) {
                clearInterval(interval);
                return;
            }

            const [file, toRun] = entries[index];
            if (toRun) {
                console.log(chalk.green(`Running ${file}...`));
                require(path.resolve(file));
            } else {
                console.log(chalk.red(`Skipping ${file}`));
            }
            index++;
        }, 1000); // Adjust the delay between each file (1000ms = 1 second)
    }

    run() {
        this.startLoading();
        this.readConfig();
        this.delayedExecution();
    }
}

module.exports = Runner;
